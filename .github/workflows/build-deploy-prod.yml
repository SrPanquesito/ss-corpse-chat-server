# Testing should create cicd branch in EC2
name: Deploy Docker Image to Production

on:
  push:
    branches:
      - "master"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2 
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ vars.DOCKERHUB_USERNAME }}/ss-corpse-chat-server:latest
          secrets: |
            "PORT=8080"
            "JWT_SECRET=${{ secrets.JWT_SECRET }}"
            "AWS_REGION='us-west-2'"
            "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
            "AWS_ACCESS_KEY_SECRET=${{ secrets.AWS_ACCESS_KEY_SECRET }}"
            "AWS_S3_BUCKET_NAME='ss-corpse-chat-general-bucket'"
            "MYSQL_HOST=${{ secrets.MYSQL_HOST }}"
            "MYSQL_PORT=${{ secrets.MYSQL_PORT }}"
            "MYSQL_USERNAME=${{ secrets.MYSQL_USERNAME }}"
            "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}"
            "MYSQL_DBNAME=${{ secrets.MYSQL_DBNAME }}"
            "CYPHER_KEY=${{ secrets.CYPHER_KEY }}"
            "CYPHER_IV=${{ secrets.CYPHER_IV }}"
            ALLOW_LIST=["https://corpsechat.com","https://www.corpsechat.com"]
      -
        name: Pull & Deploy
        env:
            PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            HOSTNAME: ${{ secrets.SSH_HOST }}
            USER_NAME: ${{ secrets.USER_NAME }}
      
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
              cd /home/${{ secrets.USER_NAME }}/code/ss-corpse-chat-server &&
              docker login -u ${{ vars.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} &&
              docker stop server && docker rm server &&
              docker image rm ${{ vars.DOCKERHUB_USERNAME }}/ss-corpse-chat-server &&
              docker image pull ${{ vars.DOCKERHUB_USERNAME }}/ss-corpse-chat-server:latest &&
              docker run -it --name server --platform linux/amd64 -d -p 8083:8080 ${{ vars.DOCKERHUB_USERNAME }}/ss-corpse-chat-server
              '
